/*
 * SmartBearCoin - Payees API
 *
 * The **Customer Managment - Payees API** - allows retrieval of payees and payee transactions. The Payees API allows consumers to search, identify and retrieve payee information in one specified country. Customer centricity is part of the DNA of SmartBearCoin. Therefore, Customer Management (CM) is considered a core business capability. The focus of CM is outward focused on enabling a consistent, digital customer experience, throughout the customer journey and across channels (omnichannel). This leads to measurable improvements of customer satisfaction and the increase of sales volume and/or margin. Value exposed through Customer Management capabilities is build upon an API-First strategy at SmartBearCoin. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: customer.management.apiteam@smartbearcoin.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace SmartBearCoin.CustomerManagement.Models.OpenAPI
{ 
    /// <summary>
    /// Problem object provides detailed information about an errors that occurred during an api call execution. This problem object is conform the standard specifications, see https://tools.ietf.org/html/rfc7807. The extensions on the standard are the &#x60;contextData&#x60; providing context data and &#x60;details&#x60; arrays. 
    /// </summary>
    [DataContract]
    public partial class Problem : IEquatable<Problem>
    { 
        /// <summary>
        /// an application-specific error code
        /// </summary>
        /// <value>an application-specific error code</value>
        [Required]

        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// The HTTP status code generated by the origin server for this occurrence of the problem
        /// </summary>
        /// <value>The HTTP status code generated by the origin server for this occurrence of the problem</value>
        [Required]

        [DataMember(Name="status")]
        public int? Status { get; set; }

        /// <summary>
        /// A URI reference that identifies the problem type.
        /// </summary>
        /// <value>A URI reference that identifies the problem type.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum MissingRequestHeaderEnum for https://api.smartbearcoin.com/problems/missing-request-header
            /// </summary>
            [EnumMember(Value = "https://api.smartbearcoin.com/problems/missing-request-header")]
            MissingRequestHeaderEnum = 0,
            /// <summary>
            /// Enum MissingRequestParameterEnum for https://api.smartbearcoin.com/problems/missing-request-parameter
            /// </summary>
            [EnumMember(Value = "https://api.smartbearcoin.com/problems/missing-request-parameter")]
            MissingRequestParameterEnum = 1,
            /// <summary>
            /// Enum InvalidRequestHeaderFormatEnum for https://api.smartbearcoin.com/problems/invalid-request-header-format
            /// </summary>
            [EnumMember(Value = "https://api.smartbearcoin.com/problems/invalid-request-header-format")]
            InvalidRequestHeaderFormatEnum = 2,
            /// <summary>
            /// Enum InvalidRequestParameterFormatEnum for https://api.smartbearcoin.com/problems/invalid-request-parameter-format
            /// </summary>
            [EnumMember(Value = "https://api.smartbearcoin.com/problems/invalid-request-parameter-format")]
            InvalidRequestParameterFormatEnum = 3,
            /// <summary>
            /// Enum InvalidRequestParameterValueEnum for https://api.smartbearcoin.com/problems/invalid-request-parameter-value
            /// </summary>
            [EnumMember(Value = "https://api.smartbearcoin.com/problems/invalid-request-parameter-value")]
            InvalidRequestParameterValueEnum = 4,
            /// <summary>
            /// Enum InternalServerErrorEnum for https://api.smartbearcoin.com/problems/internal-server-error
            /// </summary>
            [EnumMember(Value = "https://api.smartbearcoin.com/problems/internal-server-error")]
            InternalServerErrorEnum = 5        }

        /// <summary>
        /// A URI reference that identifies the problem type.
        /// </summary>
        /// <value>A URI reference that identifies the problem type.</value>
        [Required]

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization
        /// </summary>
        /// <value>a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TitleEnum
        {
            /// <summary>
            /// Enum MissingRequestHeaderEnum for missing-request-header
            /// </summary>
            [EnumMember(Value = "missing-request-header")]
            MissingRequestHeaderEnum = 0,
            /// <summary>
            /// Enum MissingRequestParameterEnum for missing-request-parameter
            /// </summary>
            [EnumMember(Value = "missing-request-parameter")]
            MissingRequestParameterEnum = 1,
            /// <summary>
            /// Enum InvalidRequestHeaderFormatEnum for invalid-request-header-format
            /// </summary>
            [EnumMember(Value = "invalid-request-header-format")]
            InvalidRequestHeaderFormatEnum = 2,
            /// <summary>
            /// Enum InvalidRequestParameterFormatEnum for invalid-request-parameter-format
            /// </summary>
            [EnumMember(Value = "invalid-request-parameter-format")]
            InvalidRequestParameterFormatEnum = 3,
            /// <summary>
            /// Enum InvalidRequestParameterValueEnum for invalid-request-parameter-value
            /// </summary>
            [EnumMember(Value = "invalid-request-parameter-value")]
            InvalidRequestParameterValueEnum = 4,
            /// <summary>
            /// Enum InternalServerErrorEnum for internal-server-error
            /// </summary>
            [EnumMember(Value = "internal-server-error")]
            InternalServerErrorEnum = 5        }

        /// <summary>
        /// a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization
        /// </summary>
        /// <value>a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization</value>
        [Required]

        [DataMember(Name="title")]
        public TitleEnum? Title { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem
        /// </summary>
        /// <value>A URI reference that identifies the specific occurrence of the problem</value>

        [DataMember(Name="instance")]
        public string Instance { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>

        [DataMember(Name="details")]
        public List<ProblemDetails> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Problem {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Problem)obj);
        }

        /// <summary>
        /// Returns true if Problem instances are equal
        /// </summary>
        /// <param name="other">Instance of Problem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Problem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Instance == other.Instance ||
                    Instance != null &&
                    Instance.Equals(other.Instance)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    Details.SequenceEqual(other.Details)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Instance != null)
                    hashCode = hashCode * 59 + Instance.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Problem left, Problem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Problem left, Problem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
