/*
 * SmartBearCoin - Payees API
 *
 * The **Customer Managment - Payees API** - allows retrieval of payees and payee transactions. The Payees API allows consumers to search, identify and retrieve payee information in one specified country. Customer centricity is part of the DNA of SmartBearCoin. Therefore, Customer Management (CM) is considered a core business capability. The focus of CM is outward focused on enabling a consistent, digital customer experience, throughout the customer journey and across channels (omnichannel). This leads to measurable improvements of customer satisfaction and the increase of sales volume and/or margin. Value exposed through Customer Management capabilities is build upon an API-First strategy at SmartBearCoin. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: customer.management.apiteam@smartbearcoin.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace SmartBearCoin.CustomerManagement.Models.OpenAPI
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SWIFTPayee : IEquatable<SWIFTPayee>
    { 
        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [Required]

        [StringLength(35, MinimumLength=3)]
        [DataMember(Name="account_name")]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        [Required]
        [RegularExpression("^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$")]
        [DataMember(Name="iban")]
        public string Iban { get; set; }

        /// <summary>
        /// Gets or Sets AnyBic
        /// </summary>
        [Required]
        [RegularExpression("^[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}$")]
        [DataMember(Name="any_bic")]
        public string AnyBic { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountCurrency
        /// </summary>
        [RegularExpression("/^[A-Z]{3,3}$/")]
        [StringLength(3, MinimumLength=3)]
        [DataMember(Name="bank_account_currency")]
        public string BankAccountCurrency { get; set; }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [Required]

        [DataMember(Name="bank_name")]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [Required]

        [DataMember(Name="bank_code")]
        public string BankCode { get; set; }

        /// <summary>
        /// Gets or Sets BankAddress
        /// </summary>

        [DataMember(Name="bank_address")]
        public SWIFTPayeeBankAddress BankAddress { get; set; }

        /// <summary>
        /// Gets or Sets PayeeType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PayeeTypeEnum
        {
            /// <summary>
            /// Enum PersonEnum for Person
            /// </summary>
            [EnumMember(Value = "Person")]
            PersonEnum = 0,
            /// <summary>
            /// Enum OrganizastionEnum for Organizastion
            /// </summary>
            [EnumMember(Value = "Organizastion")]
            OrganizastionEnum = 1        }

        /// <summary>
        /// Gets or Sets PayeeType
        /// </summary>
        [Required]
        [RegularExpression("/^Person|Organization$/")]
        [DataMember(Name="payee_type")]
        public PayeeTypeEnum? PayeeType { get; set; }

        /// <summary>
        /// Gets or Sets PersonalInformation
        /// </summary>

        [DataMember(Name="personal_information")]
        public SWIFTPayeePersonalInformation PersonalInformation { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationName
        /// </summary>

        [DataMember(Name="organization_name")]
        public string OrganizationName { get; set; }

        /// <summary>
        /// Gets or Sets PayeeAddress
        /// </summary>

        [DataMember(Name="payee_address")]
        public SWIFTPayeeBankAddress PayeeAddress { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceEmailAddress
        /// </summary>
        [Required]
        [RegularExpression("/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/")]
        [DataMember(Name="remittance_email_address")]
        public string RemittanceEmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SWIFTPayee {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  AnyBic: ").Append(AnyBic).Append("\n");
            sb.Append("  BankAccountCurrency: ").Append(BankAccountCurrency).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BankAddress: ").Append(BankAddress).Append("\n");
            sb.Append("  PayeeType: ").Append(PayeeType).Append("\n");
            sb.Append("  PersonalInformation: ").Append(PersonalInformation).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  PayeeAddress: ").Append(PayeeAddress).Append("\n");
            sb.Append("  RemittanceEmailAddress: ").Append(RemittanceEmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SWIFTPayee)obj);
        }

        /// <summary>
        /// Returns true if SWIFTPayee instances are equal
        /// </summary>
        /// <param name="other">Instance of SWIFTPayee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SWIFTPayee other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    Iban == other.Iban ||
                    Iban != null &&
                    Iban.Equals(other.Iban)
                ) && 
                (
                    AnyBic == other.AnyBic ||
                    AnyBic != null &&
                    AnyBic.Equals(other.AnyBic)
                ) && 
                (
                    BankAccountCurrency == other.BankAccountCurrency ||
                    BankAccountCurrency != null &&
                    BankAccountCurrency.Equals(other.BankAccountCurrency)
                ) && 
                (
                    BankName == other.BankName ||
                    BankName != null &&
                    BankName.Equals(other.BankName)
                ) && 
                (
                    BankCode == other.BankCode ||
                    BankCode != null &&
                    BankCode.Equals(other.BankCode)
                ) && 
                (
                    BankAddress == other.BankAddress ||
                    BankAddress != null &&
                    BankAddress.Equals(other.BankAddress)
                ) && 
                (
                    PayeeType == other.PayeeType ||
                    PayeeType != null &&
                    PayeeType.Equals(other.PayeeType)
                ) && 
                (
                    PersonalInformation == other.PersonalInformation ||
                    PersonalInformation != null &&
                    PersonalInformation.Equals(other.PersonalInformation)
                ) && 
                (
                    OrganizationName == other.OrganizationName ||
                    OrganizationName != null &&
                    OrganizationName.Equals(other.OrganizationName)
                ) && 
                (
                    PayeeAddress == other.PayeeAddress ||
                    PayeeAddress != null &&
                    PayeeAddress.Equals(other.PayeeAddress)
                ) && 
                (
                    RemittanceEmailAddress == other.RemittanceEmailAddress ||
                    RemittanceEmailAddress != null &&
                    RemittanceEmailAddress.Equals(other.RemittanceEmailAddress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (Iban != null)
                    hashCode = hashCode * 59 + Iban.GetHashCode();
                    if (AnyBic != null)
                    hashCode = hashCode * 59 + AnyBic.GetHashCode();
                    if (BankAccountCurrency != null)
                    hashCode = hashCode * 59 + BankAccountCurrency.GetHashCode();
                    if (BankName != null)
                    hashCode = hashCode * 59 + BankName.GetHashCode();
                    if (BankCode != null)
                    hashCode = hashCode * 59 + BankCode.GetHashCode();
                    if (BankAddress != null)
                    hashCode = hashCode * 59 + BankAddress.GetHashCode();
                    if (PayeeType != null)
                    hashCode = hashCode * 59 + PayeeType.GetHashCode();
                    if (PersonalInformation != null)
                    hashCode = hashCode * 59 + PersonalInformation.GetHashCode();
                    if (OrganizationName != null)
                    hashCode = hashCode * 59 + OrganizationName.GetHashCode();
                    if (PayeeAddress != null)
                    hashCode = hashCode * 59 + PayeeAddress.GetHashCode();
                    if (RemittanceEmailAddress != null)
                    hashCode = hashCode * 59 + RemittanceEmailAddress.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SWIFTPayee left, SWIFTPayee right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SWIFTPayee left, SWIFTPayee right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
