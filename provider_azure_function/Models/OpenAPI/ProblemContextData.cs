/*
 * SmartBearCoin - Payees API
 *
 * The **Customer Managment - Payees API** - allows retrieval of payees and payee transactions. The Payees API allows consumers to search, identify and retrieve payee information in one specified country. Customer centricity is part of the DNA of SmartBearCoin. Therefore, Customer Management (CM) is considered a core business capability. The focus of CM is outward focused on enabling a consistent, digital customer experience, throughout the customer journey and across channels (omnichannel). This leads to measurable improvements of customer satisfaction and the increase of sales volume and/or margin. Value exposed through Customer Management capabilities is build upon an API-First strategy at SmartBearCoin. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: customer.management.apiteam@smartbearcoin.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace SmartBearCoin.CustomerManagement.Models.OpenAPI
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProblemContextData : IEquatable<ProblemContextData>
    { 
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [Required]

        [DataMember(Name="path")]
        public string? Path { get; set; }

        /// <summary>
        /// Gets or Sets ProvidedValue
        /// </summary>

        [DataMember(Name="providedValue")]
        public string? ProvidedValue { get; set; }

        /// <summary>
        /// Gets or Sets AllowedValues
        /// </summary>

        [DataMember(Name="allowedValues")]
        public List<string>? AllowedValues { get; set; }

        /// <summary>
        /// Gets or Sets AllowedFormat
        /// </summary>

        [DataMember(Name="allowedFormat")]
        public string? AllowedFormat { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>

        [DataMember(Name="condition")]
        public string? Condition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProblemContextData {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ProvidedValue: ").Append(ProvidedValue).Append("\n");
            sb.Append("  AllowedValues: ").Append(AllowedValues).Append("\n");
            sb.Append("  AllowedFormat: ").Append(AllowedFormat).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProblemContextData)obj);
        }

        /// <summary>
        /// Returns true if ProblemContextData instances are equal
        /// </summary>
        /// <param name="other">Instance of ProblemContextData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProblemContextData? other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Path == other?.Path ||
                    Path != null &&
                    Path.Equals(other?.Path)
                ) && 
                (
                    ProvidedValue == other?.ProvidedValue ||
                    ProvidedValue != null &&
                    ProvidedValue.Equals(other?.ProvidedValue)
                ) && 
                (
                    AllowedValues == other?.AllowedValues ||
                    AllowedValues != null &&
                    AllowedValues.SequenceEqual(other?.AllowedValues ?? new List<string>())
                ) && 
                (
                    AllowedFormat == other?.AllowedFormat ||
                    AllowedFormat != null &&
                    AllowedFormat.Equals(other?.AllowedFormat)
                ) && 
                (
                    Condition == other?.Condition ||
                    Condition != null &&
                    Condition.Equals(other?.Condition)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (ProvidedValue != null)
                    hashCode = hashCode * 59 + ProvidedValue.GetHashCode();
                    if (AllowedValues != null)
                    hashCode = hashCode * 59 + AllowedValues.GetHashCode();
                    if (AllowedFormat != null)
                    hashCode = hashCode * 59 + AllowedFormat.GetHashCode();
                    if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProblemContextData left, ProblemContextData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProblemContextData left, ProblemContextData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
